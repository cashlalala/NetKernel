# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.

import _NetKernel
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class MultiPartInfo(object):
    """Proxy of C++ MultiPartInfo class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    filePath = _swig_property(_NetKernel.MultiPartInfo_filePath_get, _NetKernel.MultiPartInfo_filePath_set)
    content = _swig_property(_NetKernel.MultiPartInfo_content_get, _NetKernel.MultiPartInfo_content_set)
    header = _swig_property(_NetKernel.MultiPartInfo_header_get, _NetKernel.MultiPartInfo_header_set)
    dwFileSize = _swig_property(_NetKernel.MultiPartInfo_dwFileSize_get, _NetKernel.MultiPartInfo_dwFileSize_set)
    def __init__(self, *args): 
        """__init__(self) -> MultiPartInfo"""
        this = _NetKernel.new_MultiPartInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NetKernel.delete_MultiPartInfo
    __del__ = lambda self : None;
MultiPartInfo_swigregister = _NetKernel.MultiPartInfo_swigregister
MultiPartInfo_swigregister(MultiPartInfo)
cvar = _NetKernel.cvar
CALLBACK_OK = cvar.CALLBACK_OK
CALLBACK_CANCEL = cvar.CALLBACK_CANCEL
ERROR_PROCESS = cvar.ERROR_PROCESS
ERROR_FORCECCLOSE = cvar.ERROR_FORCECCLOSE
CACHE_USE = cvar.CACHE_USE
CACHE_NOUSE = cvar.CACHE_NOUSE


def SetDumpFile(*args):
  """SetDumpFile(BOOL isDump, WCHAR lpwszPath)"""
  return _NetKernel.SetDumpFile(*args)

def genBoundary(*args):
  """genBoundary() -> string"""
  return _NetKernel.genBoundary(*args)

def genPyBoundary(*args):
  """genPyBoundary() -> PyObject"""
  return _NetKernel.genPyBoundary(*args)
class PyNetKernel(object):
    """Proxy of C++ PyNetKernel class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> PyNetKernel"""
        this = _NetKernel.new_PyNetKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NetKernel.delete_PyNetKernel
    __del__ = lambda self : None;
    def SetCallback(*args):
        """SetCallback(self, PyObject callback)"""
        return _NetKernel.PyNetKernel_SetCallback(*args)

    def SendHttpRequest(*args):
        """
        SendHttpRequest(self, CHAR lpszApName, CHAR lpszMethod, CHAR lpszServer, 
            DWORD dwPort, BOOL bSecure, CHAR lpszUrl, CHAR lpszHeader, 
            CHAR lpszBody=None, WCHAR lpwszResponse=None, 
            WCHAR lpwszDump=None) -> PyObject
        SendHttpRequest(self, CHAR lpszApName, CHAR lpszMethod, CHAR lpszServer, 
            DWORD dwPort, BOOL bSecure, CHAR lpszUrl, CHAR lpszHeader, 
            CHAR lpszBody=None, WCHAR lpwszResponse=None) -> PyObject
        SendHttpRequest(self, CHAR lpszApName, CHAR lpszMethod, CHAR lpszServer, 
            DWORD dwPort, BOOL bSecure, CHAR lpszUrl, CHAR lpszHeader, 
            CHAR lpszBody=None) -> PyObject
        SendHttpRequest(self, CHAR lpszApName, CHAR lpszMethod, CHAR lpszServer, 
            DWORD dwPort, BOOL bSecure, CHAR lpszUrl, CHAR lpszHeader) -> PyObject
        """
        return _NetKernel.PyNetKernel_SendHttpRequest(*args)

    def SendHttpContent(*args):
        """
        SendHttpContent(self, CHAR lpszApName, CHAR lpszMethod, CHAR lpszServer, 
            DWORD wPort, BOOL bSecure, CHAR lpszUrl, CHAR lpszHeader, 
            CHAR lpBody, DWORD dwLength, WCHAR lpwszResponse, 
            WCHAR lpwszDump=None) -> PyObject
        SendHttpContent(self, CHAR lpszApName, CHAR lpszMethod, CHAR lpszServer, 
            DWORD wPort, BOOL bSecure, CHAR lpszUrl, CHAR lpszHeader, 
            CHAR lpBody, DWORD dwLength, WCHAR lpwszResponse) -> PyObject
        """
        return _NetKernel.PyNetKernel_SendHttpContent(*args)

    def SendHttpRequestMultipart(*args):
        """
        SendHttpRequestMultipart(self, CHAR lpszApName, CHAR lpszUri, CHAR lpszMethod, WCHAR lpwszProxy, 
            CHAR lpszHeader, PyObject pPyMultiPart, 
            DWORD dwContentLength, WCHAR lpwszResponse=None, 
            WCHAR lpwszDump=None) -> PyObject
        SendHttpRequestMultipart(self, CHAR lpszApName, CHAR lpszUri, CHAR lpszMethod, WCHAR lpwszProxy, 
            CHAR lpszHeader, PyObject pPyMultiPart, 
            DWORD dwContentLength, WCHAR lpwszResponse=None) -> PyObject
        SendHttpRequestMultipart(self, CHAR lpszApName, CHAR lpszUri, CHAR lpszMethod, WCHAR lpwszProxy, 
            CHAR lpszHeader, PyObject pPyMultiPart, 
            DWORD dwContentLength) -> PyObject
        """
        return _NetKernel.PyNetKernel_SendHttpRequestMultipart(*args)

    def OpenUrl(*args):
        """
        OpenUrl(self, CHAR lpszUri, CHAR lpszMethod=None, WCHAR lpwszProxy=None, 
            CHAR lpszHeader=None, WCHAR lpwszResponse=None, 
            CHAR pBodyBuffer=None, DWORD dwContentLength=0) -> PyObject
        OpenUrl(self, CHAR lpszUri, CHAR lpszMethod=None, WCHAR lpwszProxy=None, 
            CHAR lpszHeader=None, WCHAR lpwszResponse=None, 
            CHAR pBodyBuffer=None) -> PyObject
        OpenUrl(self, CHAR lpszUri, CHAR lpszMethod=None, WCHAR lpwszProxy=None, 
            CHAR lpszHeader=None, WCHAR lpwszResponse=None) -> PyObject
        OpenUrl(self, CHAR lpszUri, CHAR lpszMethod=None, WCHAR lpwszProxy=None, 
            CHAR lpszHeader=None) -> PyObject
        OpenUrl(self, CHAR lpszUri, CHAR lpszMethod=None, WCHAR lpwszProxy=None) -> PyObject
        OpenUrl(self, CHAR lpszUri, CHAR lpszMethod=None) -> PyObject
        OpenUrl(self, CHAR lpszUri) -> PyObject
        """
        return _NetKernel.PyNetKernel_OpenUrl(*args)

    def SendUrlRequest(*args):
        """
        SendUrlRequest(self, CHAR lpszUri, CHAR lpszMethod, WCHAR lpwszProxy, CHAR lpszHeader, 
            CHAR pBodyBuffer=None, DWORD dwBodyLength=0) -> PyObject
        SendUrlRequest(self, CHAR lpszUri, CHAR lpszMethod, WCHAR lpwszProxy, CHAR lpszHeader, 
            CHAR pBodyBuffer=None) -> PyObject
        SendUrlRequest(self, CHAR lpszUri, CHAR lpszMethod, WCHAR lpwszProxy, CHAR lpszHeader) -> PyObject
        """
        return _NetKernel.PyNetKernel_SendUrlRequest(*args)

    def ReceiveUrlData(*args):
        """
        ReceiveUrlData(self, DWORD dwContentLength, WCHAR lpwszResponse=None) -> PyObject
        ReceiveUrlData(self, DWORD dwContentLength) -> PyObject
        """
        return _NetKernel.PyNetKernel_ReceiveUrlData(*args)

    File = _NetKernel.PyNetKernel_File
    Cookie = _NetKernel.PyNetKernel_Cookie
    def DeleteUrlCache(*args):
        """DeleteUrlCache(self, int type, WCHAR lpwszCookieName) -> PyObject"""
        return _NetKernel.PyNetKernel_DeleteUrlCache(*args)

    def ForceStop(*args):
        """ForceStop(self)"""
        return _NetKernel.PyNetKernel_ForceStop(*args)

    def SetWindowHandle(*args):
        """SetWindowHandle(self, HWND hWnd)"""
        return _NetKernel.PyNetKernel_SetWindowHandle(*args)

    def SetDownloadCache(*args):
        """SetDownloadCache(self, BOOL bCacheDownload)"""
        return _NetKernel.PyNetKernel_SetDownloadCache(*args)

    def GetDZRegParams(*args):
        """GetDZRegParams(self) -> PyObject"""
        return _NetKernel.PyNetKernel_GetDZRegParams(*args)

    def SetHaveRegToOLREG(*args):
        """SetHaveRegToOLREG(self)"""
        return _NetKernel.PyNetKernel_SetHaveRegToOLREG(*args)

PyNetKernel_swigregister = _NetKernel.PyNetKernel_swigregister
PyNetKernel_swigregister(PyNetKernel)



